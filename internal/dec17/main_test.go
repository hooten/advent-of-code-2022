package main

import (
	"github.com/stretchr/testify/require"
	"testing"
)

func TestFallSegment(t *testing.T) {
	testCases := []struct {
		input    [][]string
		expected [][]string
	}{
		{

			input: [][]string{
				{"#", ".", ".", "#", ".", ".", "."},
				{".", "@", "@", ".", ".", ".", "."},
				{".", "@", "@", ".", ".", ".", "."},
				{".", ".", "@", ".", ".", ".", "."},
			},
			expected: [][]string{
				{"#", "@", "@", "#", ".", ".", "."},
				{".", "@", "@", ".", ".", ".", "."},
				{".", ".", "@", ".", ".", ".", "."},
				{".", ".", ".", ".", ".", ".", "."},
			},
		},
		{
			// |....@..|
			//|....@..|
			//|....@..|
			//|....@..|
			//|..#....|
			input: [][]string{
				{".", ".", "#", ".", ".", ".", "."},
				{".", ".", ".", "@", ".", ".", "."},
				{".", ".", ".", "@", ".", ".", "."},
				{".", ".", ".", "@", ".", ".", "."},
				{".", ".", ".", "@", ".", ".", "."},
			},
			expected: [][]string{
				{".", ".", "#", "@", ".", ".", "."},
				{".", ".", ".", "@", ".", ".", "."},
				{".", ".", ".", "@", ".", ".", "."},
				{".", ".", ".", "@", ".", ".", "."},
				{".", ".", ".", ".", ".", ".", "."},
			},
		},
	}
	for _, tc := range testCases {

		actual, err := FallSegment(tc.input)
		require.Nil(t, err)
		require.Equal(t, tc.expected, actual)
	}
}

func TestFall(t *testing.T) {
	chamber := NewChamber()
	chamber.tower = [][]string{
		{".", ".", "#", ".", ".", ".", "."},
		{".", ".", ".", "@", ".", ".", "."},
		{".", ".", ".", "@", ".", ".", "."},
		{".", ".", ".", "@", ".", ".", "."},
		{".", ".", ".", "@", ".", ".", "."},
	}
	chamber.Fall()
	expected := [][]string{
		{".", ".", "#", "@", ".", ".", "."},
		{".", ".", ".", "@", ".", ".", "."},
		{".", ".", ".", "@", ".", ".", "."},
		{".", ".", ".", "@", ".", ".", "."},
	}
	require.Equal(t, expected, chamber.tower)
}

func TestChamber_ApplyJet(t *testing.T) {
	testCases := []struct {
		input    [][]string
		jet      Jet
		expected [][]string
	}{
		{
			//|......@|
			//|......@|
			//|..#.@@@|
			//|.###...|
			input: [][]string{
				{".", "#", "#", "#", ".", ".", "."},
				{".", ".", "#", ".", "@", "@", "@"},
				{".", ".", ".", ".", ".", ".", "@"},
				{".", ".", ".", ".", ".", ".", "@"},
			},
			jet: "<",
			expected: [][]string{
				{".", "#", "#", "#", ".", ".", "."},
				{".", ".", "#", "@", "@", "@", "."},
				{".", ".", ".", ".", ".", "@", "."},
				{".", ".", ".", ".", ".", "@", "."},
			},
		},
		{
			//|....#..|
			//|..@@#..|
			//|..@@##.|
			//|....##.|
			input: [][]string{
				{".", ".", ".", ".", "#", "#", "."},
				{".", ".", "@", "@", "#", "#", "."},
				{".", ".", "@", "@", "#", ".", "."},
				{".", ".", ".", ".", "#", ".", "."},
			},
			jet: "<",
			expected: [][]string{
				{".", ".", ".", ".", "#", "#", "."},
				{".", "@", "@", ".", "#", "#", "."},
				{".", "@", "@", ".", "#", ".", "."},
				{".", ".", ".", ".", "#", ".", "."},
			},
		},
	}
	for _, tc := range testCases {

		chamber := NewChamber()
		chamber.tower = tc.input
		jet := chamber.ApplyJet(tc.jet)
		require.True(t, jet)
		require.Equal(t, tc.expected, chamber.tower)
	}
}
